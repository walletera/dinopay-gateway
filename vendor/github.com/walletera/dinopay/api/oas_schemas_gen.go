// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// A DinoPay account.
// Ref: #/components/schemas/account
type Account struct {
	// Name of the account owner of the account.
	AccountHolder string `json:"accountHolder"`
	// Number that identifies the account.
	AccountNumber string `json:"accountNumber"`
}

// GetAccountHolder returns the value of AccountHolder.
func (s *Account) GetAccountHolder() string {
	return s.AccountHolder
}

// GetAccountNumber returns the value of AccountNumber.
func (s *Account) GetAccountNumber() string {
	return s.AccountNumber
}

// SetAccountHolder sets the value of AccountHolder.
func (s *Account) SetAccountHolder(val string) {
	s.AccountHolder = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *Account) SetAccountNumber(val string) {
	s.AccountNumber = val
}

// CreateEventSubscriptionCreated is response for CreateEventSubscription operation.
type CreateEventSubscriptionCreated struct{}

// A text message describing an error.
// Ref: #/components/schemas/errorMessage
type CreatePaymentBadRequest struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreatePaymentBadRequest) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreatePaymentBadRequest) createPaymentRes() {}

// Ref: #/components/schemas/eventSubscription
type EventSubscription struct {
	CallbackUrl url.URL `json:"callbackUrl"`
	EventType   string  `json:"eventType"`
}

// GetCallbackUrl returns the value of CallbackUrl.
func (s *EventSubscription) GetCallbackUrl() url.URL {
	return s.CallbackUrl
}

// GetEventType returns the value of EventType.
func (s *EventSubscription) GetEventType() string {
	return s.EventType
}

// SetCallbackUrl sets the value of CallbackUrl.
func (s *EventSubscription) SetCallbackUrl(val url.URL) {
	s.CallbackUrl = val
}

// SetEventType sets the value of EventType.
func (s *EventSubscription) SetEventType(val string) {
	s.EventType = val
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentStatus returns new OptPaymentStatus with value set to v.
func NewOptPaymentStatus(v PaymentStatus) OptPaymentStatus {
	return OptPaymentStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentStatus is optional PaymentStatus.
type OptPaymentStatus struct {
	Value PaymentStatus
	Set   bool
}

// IsSet returns true if OptPaymentStatus was set.
func (o OptPaymentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentStatus) Reset() {
	var v PaymentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentStatus) SetTo(v PaymentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentStatus) Get() (v PaymentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentStatus) Or(d PaymentStatus) PaymentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// A transfer of money from a source account to a destination account.
// Ref: #/components/schemas/payment
type Payment struct {
	// Payment UUID.
	ID OptUUID `json:"id"`
	// Payment amount.
	Amount float64 `json:"amount"`
	// ISO 4217 currency code.
	Currency string `json:"currency"`
	// Details of the debtor's account.
	SourceAccount Account `json:"sourceAccount"`
	// Details of the beneficiary's account.
	DestinationAccount Account `json:"destinationAccount"`
	// Payment status.
	Status OptPaymentStatus `json:"status"`
	// A unique id generated by the customer for this payment.
	CustomerTransactionId OptString `json:"customerTransactionId"`
	// Date and time when the payment was created expressed in ISO 8601 format.
	CreatedAt OptDate `json:"createdAt"`
	// Date and time of the last update made to the payment expressed in ISO 8601 format.
	UpdatedAt OptDate `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Payment) GetID() OptUUID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *Payment) GetAmount() float64 {
	return s.Amount
}

// GetCurrency returns the value of Currency.
func (s *Payment) GetCurrency() string {
	return s.Currency
}

// GetSourceAccount returns the value of SourceAccount.
func (s *Payment) GetSourceAccount() Account {
	return s.SourceAccount
}

// GetDestinationAccount returns the value of DestinationAccount.
func (s *Payment) GetDestinationAccount() Account {
	return s.DestinationAccount
}

// GetStatus returns the value of Status.
func (s *Payment) GetStatus() OptPaymentStatus {
	return s.Status
}

// GetCustomerTransactionId returns the value of CustomerTransactionId.
func (s *Payment) GetCustomerTransactionId() OptString {
	return s.CustomerTransactionId
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Payment) GetCreatedAt() OptDate {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Payment) GetUpdatedAt() OptDate {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Payment) SetID(val OptUUID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *Payment) SetAmount(val float64) {
	s.Amount = val
}

// SetCurrency sets the value of Currency.
func (s *Payment) SetCurrency(val string) {
	s.Currency = val
}

// SetSourceAccount sets the value of SourceAccount.
func (s *Payment) SetSourceAccount(val Account) {
	s.SourceAccount = val
}

// SetDestinationAccount sets the value of DestinationAccount.
func (s *Payment) SetDestinationAccount(val Account) {
	s.DestinationAccount = val
}

// SetStatus sets the value of Status.
func (s *Payment) SetStatus(val OptPaymentStatus) {
	s.Status = val
}

// SetCustomerTransactionId sets the value of CustomerTransactionId.
func (s *Payment) SetCustomerTransactionId(val OptString) {
	s.CustomerTransactionId = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Payment) SetCreatedAt(val OptDate) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Payment) SetUpdatedAt(val OptDate) {
	s.UpdatedAt = val
}

func (*Payment) createPaymentRes() {}

// Payment status.
type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusConfirmed PaymentStatus = "confirmed"
	PaymentStatusRejected  PaymentStatus = "rejected"
)

// MarshalText implements encoding.TextMarshaler.
func (s PaymentStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentStatusPending:
		return []byte(s), nil
	case PaymentStatusConfirmed:
		return []byte(s), nil
	case PaymentStatusRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentStatus) UnmarshalText(data []byte) error {
	switch PaymentStatus(data) {
	case PaymentStatusPending:
		*s = PaymentStatusPending
		return nil
	case PaymentStatusConfirmed:
		*s = PaymentStatusConfirmed
		return nil
	case PaymentStatusRejected:
		*s = PaymentStatusRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
